// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/eni (interfaces: StateManagerInterface)

package mock_eni

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of StateManagerInterface interface
type MockStateManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockStateManagerInterfaceRecorder
}

// Recorder for MockStateManagerInterface (not exported)
type _MockStateManagerInterfaceRecorder struct {
	mock *MockStateManagerInterface
}

func NewMockStateManagerInterface(ctrl *gomock.Controller) *MockStateManagerInterface {
	mock := &MockStateManagerInterface{ctrl: ctrl}
	mock.recorder = &_MockStateManagerInterfaceRecorder{mock}
	return mock
}

func (_m *MockStateManagerInterface) EXPECT() *_MockStateManagerInterfaceRecorder {
	return _m.recorder
}

func (_m *MockStateManagerInterface) AddDeviceWithMACAddressUnsafe(_param0 string, _param1 string) {
	_m.ctrl.Call(_m, "AddDeviceWithMACAddressUnsafe", _param0, _param1)
}

func (_mr *_MockStateManagerInterfaceRecorder) AddDeviceWithMACAddressUnsafe(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDeviceWithMACAddressUnsafe", arg0, arg1)
}

func (_m *MockStateManagerInterface) GetAll() map[string]string {
	ret := _m.ctrl.Call(_m, "GetAll")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

func (_mr *_MockStateManagerInterfaceRecorder) GetAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAll")
}

func (_m *MockStateManagerInterface) Lock() {
	_m.ctrl.Call(_m, "Lock")
}

func (_mr *_MockStateManagerInterfaceRecorder) Lock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Lock")
}

func (_m *MockStateManagerInterface) RemoveDeviceUnsafe(_param0 string) {
	_m.ctrl.Call(_m, "RemoveDeviceUnsafe", _param0)
}

func (_mr *_MockStateManagerInterfaceRecorder) RemoveDeviceUnsafe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDeviceUnsafe", arg0)
}

func (_m *MockStateManagerInterface) RemoveDeviceWithMACAddressUnsafe(_param0 string) {
	_m.ctrl.Call(_m, "RemoveDeviceWithMACAddressUnsafe", _param0)
}

func (_mr *_MockStateManagerInterfaceRecorder) RemoveDeviceWithMACAddressUnsafe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDeviceWithMACAddressUnsafe", arg0)
}

func (_m *MockStateManagerInterface) Unlock() {
	_m.ctrl.Call(_m, "Unlock")
}

func (_mr *_MockStateManagerInterfaceRecorder) Unlock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unlock")
}
